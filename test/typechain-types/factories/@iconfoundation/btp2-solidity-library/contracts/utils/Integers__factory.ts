/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Integers,
  IntegersInterface,
} from "../../../../../@iconfoundation/btp2-solidity-library/contracts/utils/Integers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_value",
        type: "string",
      },
    ],
    name: "parseInt",
    outputs: [
      {
        internalType: "uint256",
        name: "_ret",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6102ff61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806342346c5e1461003a575b600080fd5b61004d61004836600461014f565b61005f565b60405190815260200160405180910390f35b805160009082906001908390610076908390610215565b90505b82518110156101315760308382815181106100965761009661022c565b016020015160f81c108015906100c6575060398382815181106100bb576100bb61022c565b016020015160f81c11155b6100d2576100d2610242565b8160308483815181106100e7576100e761022c565b01602001516100f9919060f81c610258565b60ff16610106919061027b565b610110908561029a565b935061011d600a8361027b565b915080610129816102b2565b915050610079565b505050919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561016157600080fd5b81356001600160401b038082111561017857600080fd5b818401915084601f83011261018c57600080fd5b81358181111561019e5761019e610139565b604051601f8201601f19908116603f011681019083821181831017156101c6576101c6610139565b816040528281528760208487010111156101df57600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610227576102276101ff565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600060ff821660ff841680821015610272576102726101ff565b90039392505050565b6000816000190483118215151615610295576102956101ff565b500290565b600082198211156102ad576102ad6101ff565b500190565b6000816102c1576102c16101ff565b50600019019056fea26469706673582212209da96e092fb5280cdf3775402e1bad51615e258d8280940a1a7f2d537e476ccb64736f6c634300080c0033";

type IntegersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntegersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Integers__factory extends ContractFactory {
  constructor(...args: IntegersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Integers> {
    return super.deploy(overrides || {}) as Promise<Integers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Integers {
    return super.attach(address) as Integers;
  }
  override connect(signer: Signer): Integers__factory {
    return super.connect(signer) as Integers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntegersInterface {
    return new utils.Interface(_abi) as IntegersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Integers {
    return new Contract(address, _abi, signerOrProvider) as Integers;
  }
}
