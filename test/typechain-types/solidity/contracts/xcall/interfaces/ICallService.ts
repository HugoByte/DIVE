/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ICallServiceInterface extends utils.Interface {
  functions: {
    "executeCall(uint256,bytes)": FunctionFragment;
    "executeRollback(uint256)": FunctionFragment;
    "getBtpAddress()": FunctionFragment;
    "sendCallMessage(string,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeCall"
      | "executeRollback"
      | "getBtpAddress"
      | "sendCallMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeCall",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRollback",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBtpAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendCallMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRollback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBtpAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCallMessage",
    data: BytesLike
  ): Result;

  events: {
    "CallExecuted(uint256,int256,string)": EventFragment;
    "CallMessage(string,string,uint256,uint256,bytes)": EventFragment;
    "CallMessageSent(address,string,uint256,int256)": EventFragment;
    "ResponseMessage(uint256,int256,string)": EventFragment;
    "RollbackExecuted(uint256,int256,string)": EventFragment;
    "RollbackMessage(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallMessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResponseMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollbackExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollbackMessage"): EventFragment;
}

export interface CallExecutedEventObject {
  _reqId: BigNumber;
  _code: BigNumber;
  _msg: string;
}
export type CallExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CallExecutedEventObject
>;

export type CallExecutedEventFilter = TypedEventFilter<CallExecutedEvent>;

export interface CallMessageEventObject {
  _from: string;
  _to: string;
  _sn: BigNumber;
  _reqId: BigNumber;
  _data: string;
}
export type CallMessageEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  CallMessageEventObject
>;

export type CallMessageEventFilter = TypedEventFilter<CallMessageEvent>;

export interface CallMessageSentEventObject {
  _from: string;
  _to: string;
  _sn: BigNumber;
  _nsn: BigNumber;
}
export type CallMessageSentEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  CallMessageSentEventObject
>;

export type CallMessageSentEventFilter = TypedEventFilter<CallMessageSentEvent>;

export interface ResponseMessageEventObject {
  _sn: BigNumber;
  _code: BigNumber;
  _msg: string;
}
export type ResponseMessageEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ResponseMessageEventObject
>;

export type ResponseMessageEventFilter = TypedEventFilter<ResponseMessageEvent>;

export interface RollbackExecutedEventObject {
  _sn: BigNumber;
  _code: BigNumber;
  _msg: string;
}
export type RollbackExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  RollbackExecutedEventObject
>;

export type RollbackExecutedEventFilter =
  TypedEventFilter<RollbackExecutedEvent>;

export interface RollbackMessageEventObject {
  _sn: BigNumber;
}
export type RollbackMessageEvent = TypedEvent<
  [BigNumber],
  RollbackMessageEventObject
>;

export type RollbackMessageEventFilter = TypedEventFilter<RollbackMessageEvent>;

export interface ICallService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICallServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeCall(
      _reqId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRollback(
      _sn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBtpAddress(overrides?: CallOverrides): Promise<[string]>;

    sendCallMessage(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _rollback: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeCall(
    _reqId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRollback(
    _sn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBtpAddress(overrides?: CallOverrides): Promise<string>;

  sendCallMessage(
    _to: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _rollback: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeCall(
      _reqId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRollback(
      _sn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBtpAddress(overrides?: CallOverrides): Promise<string>;

    sendCallMessage(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _rollback: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CallExecuted(uint256,int256,string)"(
      _reqId?: PromiseOrValue<BigNumberish> | null,
      _code?: null,
      _msg?: null
    ): CallExecutedEventFilter;
    CallExecuted(
      _reqId?: PromiseOrValue<BigNumberish> | null,
      _code?: null,
      _msg?: null
    ): CallExecutedEventFilter;

    "CallMessage(string,string,uint256,uint256,bytes)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _sn?: PromiseOrValue<BigNumberish> | null,
      _reqId?: null,
      _data?: null
    ): CallMessageEventFilter;
    CallMessage(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _sn?: PromiseOrValue<BigNumberish> | null,
      _reqId?: null,
      _data?: null
    ): CallMessageEventFilter;

    "CallMessageSent(address,string,uint256,int256)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _sn?: PromiseOrValue<BigNumberish> | null,
      _nsn?: null
    ): CallMessageSentEventFilter;
    CallMessageSent(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _sn?: PromiseOrValue<BigNumberish> | null,
      _nsn?: null
    ): CallMessageSentEventFilter;

    "ResponseMessage(uint256,int256,string)"(
      _sn?: PromiseOrValue<BigNumberish> | null,
      _code?: null,
      _msg?: null
    ): ResponseMessageEventFilter;
    ResponseMessage(
      _sn?: PromiseOrValue<BigNumberish> | null,
      _code?: null,
      _msg?: null
    ): ResponseMessageEventFilter;

    "RollbackExecuted(uint256,int256,string)"(
      _sn?: PromiseOrValue<BigNumberish> | null,
      _code?: null,
      _msg?: null
    ): RollbackExecutedEventFilter;
    RollbackExecuted(
      _sn?: PromiseOrValue<BigNumberish> | null,
      _code?: null,
      _msg?: null
    ): RollbackExecutedEventFilter;

    "RollbackMessage(uint256)"(
      _sn?: PromiseOrValue<BigNumberish> | null
    ): RollbackMessageEventFilter;
    RollbackMessage(
      _sn?: PromiseOrValue<BigNumberish> | null
    ): RollbackMessageEventFilter;
  };

  estimateGas: {
    executeCall(
      _reqId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRollback(
      _sn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBtpAddress(overrides?: CallOverrides): Promise<BigNumber>;

    sendCallMessage(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _rollback: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeCall(
      _reqId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRollback(
      _sn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBtpAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendCallMessage(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _rollback: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
