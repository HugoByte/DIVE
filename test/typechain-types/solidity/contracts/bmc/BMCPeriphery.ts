/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Types {
  export type FeeInfoStruct = {
    network: PromiseOrValue<string>;
    values: PromiseOrValue<BigNumberish>[];
  };

  export type FeeInfoStructOutput = [string, BigNumber[]] & {
    network: string;
    values: BigNumber[];
  };

  export type BTPMessageStruct = {
    src: PromiseOrValue<string>;
    dst: PromiseOrValue<string>;
    svc: PromiseOrValue<string>;
    sn: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<BytesLike>;
    nsn: PromiseOrValue<BigNumberish>;
    feeInfo: Types.FeeInfoStruct;
  };

  export type BTPMessageStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    Types.FeeInfoStructOutput
  ] & {
    src: string;
    dst: string;
    svc: string;
    sn: BigNumber;
    message: string;
    nsn: BigNumber;
    feeInfo: Types.FeeInfoStructOutput;
  };

  export type RouteStruct = {
    dst: PromiseOrValue<string>;
    next: PromiseOrValue<string>;
  };

  export type RouteStructOutput = [string, string] & {
    dst: string;
    next: string;
  };

  export type ServiceStruct = {
    svc: PromiseOrValue<string>;
    addr: PromiseOrValue<string>;
  };

  export type ServiceStructOutput = [string, string] & {
    svc: string;
    addr: string;
  };

  export type LinkStatusStruct = {
    rxSeq: PromiseOrValue<BigNumberish>;
    txSeq: PromiseOrValue<BigNumberish>;
    verifier: IBMV.VerifierStatusStruct;
    currentHeight: PromiseOrValue<BigNumberish>;
  };

  export type LinkStatusStructOutput = [
    BigNumber,
    BigNumber,
    IBMV.VerifierStatusStructOutput,
    BigNumber
  ] & {
    rxSeq: BigNumber;
    txSeq: BigNumber;
    verifier: IBMV.VerifierStatusStructOutput;
    currentHeight: BigNumber;
  };
}

export declare namespace IBMV {
  export type VerifierStatusStruct = {
    height: PromiseOrValue<BigNumberish>;
    extra: PromiseOrValue<BytesLike>;
  };

  export type VerifierStatusStructOutput = [BigNumber, string] & {
    height: BigNumber;
    extra: string;
  };
}

export interface BMCPeripheryInterface extends utils.Interface {
  functions: {
    "claimReward(string,string)": FunctionFragment;
    "clearSeq(string)": FunctionFragment;
    "dropMessage(string,uint256,(string,string,string,int256,bytes,int256,(string,uint256[])))": FunctionFragment;
    "emitClaimRewardResult(address,string,int256,uint256)": FunctionFragment;
    "getBMCManagement()": FunctionFragment;
    "getBMCService()": FunctionFragment;
    "getBtpAddress()": FunctionFragment;
    "getFee(string,bool)": FunctionFragment;
    "getLinks()": FunctionFragment;
    "getNetworkAddress()": FunctionFragment;
    "getNetworkSn()": FunctionFragment;
    "getReward(string,address)": FunctionFragment;
    "getRoutes()": FunctionFragment;
    "getServices()": FunctionFragment;
    "getStatus(string)": FunctionFragment;
    "handleRelayMessage(string,bytes)": FunctionFragment;
    "initialize(string,address,address)": FunctionFragment;
    "sendInternal(string,bytes)": FunctionFragment;
    "sendMessage(string,string,int256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimReward"
      | "clearSeq"
      | "dropMessage"
      | "emitClaimRewardResult"
      | "getBMCManagement"
      | "getBMCService"
      | "getBtpAddress"
      | "getFee"
      | "getLinks"
      | "getNetworkAddress"
      | "getNetworkSn"
      | "getReward"
      | "getRoutes"
      | "getServices"
      | "getStatus"
      | "handleRelayMessage"
      | "initialize"
      | "sendInternal"
      | "sendMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearSeq",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dropMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      Types.BTPMessageStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimRewardResult",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBMCManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBMCService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBtpAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "getLinks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNetworkAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkSn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getRoutes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getServices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleRelayMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendInternal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clearSeq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dropMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitClaimRewardResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBMCManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBMCService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBtpAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLinks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkSn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoutes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleRelayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;

  events: {
    "BTPEvent(string,int256,string,string)": EventFragment;
    "ClaimReward(address,string,string,uint256,int256)": EventFragment;
    "ClaimRewardResult(address,string,int256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Message(string,uint256,bytes)": EventFragment;
    "MessageDropped(string,uint256,bytes,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BTPEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRewardResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Message"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDropped"): EventFragment;
}

export interface BTPEventEventObject {
  _src: string;
  _nsn: BigNumber;
  _next: string;
  _event: string;
}
export type BTPEventEvent = TypedEvent<
  [string, BigNumber, string, string],
  BTPEventEventObject
>;

export type BTPEventEventFilter = TypedEventFilter<BTPEventEvent>;

export interface ClaimRewardEventObject {
  _sender: string;
  _network: string;
  _receiver: string;
  _amount: BigNumber;
  _nsn: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  ClaimRewardEventObject
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface ClaimRewardResultEventObject {
  _sender: string;
  _network: string;
  _nsn: BigNumber;
  _result: BigNumber;
}
export type ClaimRewardResultEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ClaimRewardResultEventObject
>;

export type ClaimRewardResultEventFilter =
  TypedEventFilter<ClaimRewardResultEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MessageEventObject {
  _next: string;
  _seq: BigNumber;
  _msg: string;
}
export type MessageEvent = TypedEvent<
  [string, BigNumber, string],
  MessageEventObject
>;

export type MessageEventFilter = TypedEventFilter<MessageEvent>;

export interface MessageDroppedEventObject {
  _prev: string;
  _seq: BigNumber;
  _msg: string;
  _ecode: BigNumber;
  _emsg: string;
}
export type MessageDroppedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  MessageDroppedEventObject
>;

export type MessageDroppedEventFilter = TypedEventFilter<MessageDroppedEvent>;

export interface BMCPeriphery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BMCPeripheryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimReward(
      _network: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBMCManagement(overrides?: CallOverrides): Promise<[string]>;

    getBMCService(overrides?: CallOverrides): Promise<[string]>;

    getBtpAddress(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLinks(overrides?: CallOverrides): Promise<[string[]]>;

    getNetworkAddress(overrides?: CallOverrides): Promise<[string]>;

    getNetworkSn(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(
      _network: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoutes(overrides?: CallOverrides): Promise<[Types.RouteStructOutput[]]>;

    getServices(
      overrides?: CallOverrides
    ): Promise<[Types.ServiceStructOutput[]]>;

    getStatus(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Types.LinkStatusStructOutput]>;

    handleRelayMessage(
      _prev: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _network: PromiseOrValue<string>,
      _bmcManagementAddr: PromiseOrValue<string>,
      _bmcServiceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimReward(
    _network: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearSeq(
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropMessage(
    _prev: PromiseOrValue<string>,
    _seq: PromiseOrValue<BigNumberish>,
    _msg: Types.BTPMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitClaimRewardResult(
    _sender: PromiseOrValue<string>,
    _network: PromiseOrValue<string>,
    _nsn: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBMCManagement(overrides?: CallOverrides): Promise<string>;

  getBMCService(overrides?: CallOverrides): Promise<string>;

  getBtpAddress(overrides?: CallOverrides): Promise<string>;

  getFee(
    _to: PromiseOrValue<string>,
    _response: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLinks(overrides?: CallOverrides): Promise<string[]>;

  getNetworkAddress(overrides?: CallOverrides): Promise<string>;

  getNetworkSn(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(
    _network: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoutes(overrides?: CallOverrides): Promise<Types.RouteStructOutput[]>;

  getServices(overrides?: CallOverrides): Promise<Types.ServiceStructOutput[]>;

  getStatus(
    _link: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Types.LinkStatusStructOutput>;

  handleRelayMessage(
    _prev: PromiseOrValue<string>,
    _msg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _network: PromiseOrValue<string>,
    _bmcManagementAddr: PromiseOrValue<string>,
    _bmcServiceAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendInternal(
    _next: PromiseOrValue<string>,
    _msg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _to: PromiseOrValue<string>,
    _svc: PromiseOrValue<string>,
    _sn: PromiseOrValue<BigNumberish>,
    _msg: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimReward(
      _network: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBMCManagement(overrides?: CallOverrides): Promise<string>;

    getBMCService(overrides?: CallOverrides): Promise<string>;

    getBtpAddress(overrides?: CallOverrides): Promise<string>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinks(overrides?: CallOverrides): Promise<string[]>;

    getNetworkAddress(overrides?: CallOverrides): Promise<string>;

    getNetworkSn(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      _network: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoutes(overrides?: CallOverrides): Promise<Types.RouteStructOutput[]>;

    getServices(
      overrides?: CallOverrides
    ): Promise<Types.ServiceStructOutput[]>;

    getStatus(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Types.LinkStatusStructOutput>;

    handleRelayMessage(
      _prev: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _network: PromiseOrValue<string>,
      _bmcManagementAddr: PromiseOrValue<string>,
      _bmcServiceAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BTPEvent(string,int256,string,string)"(
      _src?: PromiseOrValue<string> | null,
      _nsn?: PromiseOrValue<BigNumberish> | null,
      _next?: null,
      _event?: null
    ): BTPEventEventFilter;
    BTPEvent(
      _src?: PromiseOrValue<string> | null,
      _nsn?: PromiseOrValue<BigNumberish> | null,
      _next?: null,
      _event?: null
    ): BTPEventEventFilter;

    "ClaimReward(address,string,string,uint256,int256)"(
      _sender?: PromiseOrValue<string> | null,
      _network?: PromiseOrValue<string> | null,
      _receiver?: null,
      _amount?: null,
      _nsn?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      _sender?: PromiseOrValue<string> | null,
      _network?: PromiseOrValue<string> | null,
      _receiver?: null,
      _amount?: null,
      _nsn?: null
    ): ClaimRewardEventFilter;

    "ClaimRewardResult(address,string,int256,uint256)"(
      _sender?: PromiseOrValue<string> | null,
      _network?: PromiseOrValue<string> | null,
      _nsn?: null,
      _result?: null
    ): ClaimRewardResultEventFilter;
    ClaimRewardResult(
      _sender?: PromiseOrValue<string> | null,
      _network?: PromiseOrValue<string> | null,
      _nsn?: null,
      _result?: null
    ): ClaimRewardResultEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Message(string,uint256,bytes)"(
      _next?: PromiseOrValue<string> | null,
      _seq?: PromiseOrValue<BigNumberish> | null,
      _msg?: null
    ): MessageEventFilter;
    Message(
      _next?: PromiseOrValue<string> | null,
      _seq?: PromiseOrValue<BigNumberish> | null,
      _msg?: null
    ): MessageEventFilter;

    "MessageDropped(string,uint256,bytes,uint256,string)"(
      _prev?: PromiseOrValue<string> | null,
      _seq?: PromiseOrValue<BigNumberish> | null,
      _msg?: null,
      _ecode?: null,
      _emsg?: null
    ): MessageDroppedEventFilter;
    MessageDropped(
      _prev?: PromiseOrValue<string> | null,
      _seq?: PromiseOrValue<BigNumberish> | null,
      _msg?: null,
      _ecode?: null,
      _emsg?: null
    ): MessageDroppedEventFilter;
  };

  estimateGas: {
    claimReward(
      _network: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBMCManagement(overrides?: CallOverrides): Promise<BigNumber>;

    getBMCService(overrides?: CallOverrides): Promise<BigNumber>;

    getBtpAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinks(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkSn(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      _network: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoutes(overrides?: CallOverrides): Promise<BigNumber>;

    getServices(overrides?: CallOverrides): Promise<BigNumber>;

    getStatus(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleRelayMessage(
      _prev: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _network: PromiseOrValue<string>,
      _bmcManagementAddr: PromiseOrValue<string>,
      _bmcServiceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimReward(
      _network: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBMCManagement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBMCService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBtpAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkSn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      _network: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoutes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getServices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStatus(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleRelayMessage(
      _prev: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _network: PromiseOrValue<string>,
      _bmcManagementAddr: PromiseOrValue<string>,
      _bmcServiceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
