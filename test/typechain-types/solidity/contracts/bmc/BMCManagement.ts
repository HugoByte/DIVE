/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Types {
  export type RouteStruct = {
    dst: PromiseOrValue<string>;
    next: PromiseOrValue<string>;
  };

  export type RouteStructOutput = [string, string] & {
    dst: string;
    next: string;
  };

  export type ServiceStruct = {
    svc: PromiseOrValue<string>;
    addr: PromiseOrValue<string>;
  };

  export type ServiceStructOutput = [string, string] & {
    svc: string;
    addr: string;
  };

  export type VerifierStruct = {
    net: PromiseOrValue<string>;
    addr: PromiseOrValue<string>;
  };

  export type VerifierStructOutput = [string, string] & {
    net: string;
    addr: string;
  };
}

export interface BMCManagementInterface extends utils.Interface {
  functions: {
    "addLink(string)": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "addReachable(string,string)": FunctionFragment;
    "addRelay(string,address)": FunctionFragment;
    "addRoute(string,string)": FunctionFragment;
    "addService(string,address)": FunctionFragment;
    "addVerifier(string,address)": FunctionFragment;
    "dropMessage(string,uint256,string,int256,int256,string,uint256[])": FunctionFragment;
    "getBMCPeriphery()": FunctionFragment;
    "getBMCService()": FunctionFragment;
    "getFee(string,bool)": FunctionFragment;
    "getFeeHandler()": FunctionFragment;
    "getFeeTable(string[])": FunctionFragment;
    "getHop(string)": FunctionFragment;
    "getLinks()": FunctionFragment;
    "getRelays(string)": FunctionFragment;
    "getRoutes()": FunctionFragment;
    "getService(string)": FunctionFragment;
    "getServices()": FunctionFragment;
    "getVerifier(string)": FunctionFragment;
    "getVerifiers()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isLinkRelay(string,address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "removeLink(string)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "removeReachable(string,string)": FunctionFragment;
    "removeRelay(string,address)": FunctionFragment;
    "removeRoute(string)": FunctionFragment;
    "removeService(string)": FunctionFragment;
    "removeVerifier(string)": FunctionFragment;
    "resolveNext(string)": FunctionFragment;
    "setBMCPeriphery(address)": FunctionFragment;
    "setBMCService(address)": FunctionFragment;
    "setFeeHandler(address)": FunctionFragment;
    "setFeeTable(string[],uint256[][])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLink"
      | "addOwner"
      | "addReachable"
      | "addRelay"
      | "addRoute"
      | "addService"
      | "addVerifier"
      | "dropMessage"
      | "getBMCPeriphery"
      | "getBMCService"
      | "getFee"
      | "getFeeHandler"
      | "getFeeTable"
      | "getHop"
      | "getLinks"
      | "getRelays"
      | "getRoutes"
      | "getService"
      | "getServices"
      | "getVerifier"
      | "getVerifiers"
      | "initialize"
      | "isLinkRelay"
      | "isOwner"
      | "removeLink"
      | "removeOwner"
      | "removeReachable"
      | "removeRelay"
      | "removeRoute"
      | "removeService"
      | "removeVerifier"
      | "resolveNext"
      | "setBMCPeriphery"
      | "setBMCService"
      | "setFeeHandler"
      | "setFeeTable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLink",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addReachable",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelay",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoute",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addService",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dropMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBMCPeriphery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBMCService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTable",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getHop",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getLinks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRelays",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getRoutes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLinkRelay",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLink",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReachable",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelay",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoute",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveNext",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBMCPeriphery",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBMCService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeHandler",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTable",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[][]]
  ): string;

  decodeFunctionResult(functionFragment: "addLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReachable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBMCPeriphery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBMCService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLinks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRelays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoutes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLinkRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReachable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBMCPeriphery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBMCService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTable",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface BMCManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BMCManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLink(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoute(
      _dst: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addService(
      _svc: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVerifier(
      _net: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropMessage(
      _src: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _nsn: PromiseOrValue<BigNumberish>,
      _feeNetwork: PromiseOrValue<string>,
      _feeValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBMCPeriphery(overrides?: CallOverrides): Promise<[string]>;

    getBMCService(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    getFeeHandler(overrides?: CallOverrides): Promise<[string]>;

    getFeeTable(
      _dst: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]] & { _feeTable: BigNumber[][] }>;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLinks(overrides?: CallOverrides): Promise<[string[]]>;

    getRelays(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoutes(overrides?: CallOverrides): Promise<[Types.RouteStructOutput[]]>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getServices(
      overrides?: CallOverrides
    ): Promise<[Types.ServiceStructOutput[]]>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVerifiers(
      overrides?: CallOverrides
    ): Promise<[Types.VerifierStructOutput[]]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeLink(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoute(
      _dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeService(
      _svc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVerifier(
      _net: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setBMCPeriphery(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBMCService(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeHandler(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeTable(
      _dst: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLink(
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addReachable(
    _from: PromiseOrValue<string>,
    _reachable: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRelay(
    _link: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoute(
    _dst: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addService(
    _svc: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVerifier(
    _net: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropMessage(
    _src: PromiseOrValue<string>,
    _seq: PromiseOrValue<BigNumberish>,
    _svc: PromiseOrValue<string>,
    _sn: PromiseOrValue<BigNumberish>,
    _nsn: PromiseOrValue<BigNumberish>,
    _feeNetwork: PromiseOrValue<string>,
    _feeValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBMCPeriphery(overrides?: CallOverrides): Promise<string>;

  getBMCService(overrides?: CallOverrides): Promise<string>;

  getFee(
    _to: PromiseOrValue<string>,
    _response: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  getFeeHandler(overrides?: CallOverrides): Promise<string>;

  getFeeTable(
    _dst: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  getHop(
    _dst: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLinks(overrides?: CallOverrides): Promise<string[]>;

  getRelays(
    _link: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoutes(overrides?: CallOverrides): Promise<Types.RouteStructOutput[]>;

  getService(
    _svc: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getServices(overrides?: CallOverrides): Promise<Types.ServiceStructOutput[]>;

  getVerifier(
    _net: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVerifiers(
    overrides?: CallOverrides
  ): Promise<Types.VerifierStructOutput[]>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isLinkRelay(
    _link: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeLink(
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeReachable(
    _from: PromiseOrValue<string>,
    _reachable: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRelay(
    _link: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoute(
    _dst: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeService(
    _svc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVerifier(
    _net: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveNext(
    _dst: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setBMCPeriphery(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBMCService(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeHandler(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeTable(
    _dst: PromiseOrValue<string>[],
    _value: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLink(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRoute(
      _dst: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addService(
      _svc: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVerifier(
      _net: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dropMessage(
      _src: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _nsn: PromiseOrValue<BigNumberish>,
      _feeNetwork: PromiseOrValue<string>,
      _feeValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBMCPeriphery(overrides?: CallOverrides): Promise<string>;

    getBMCService(overrides?: CallOverrides): Promise<string>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    getFeeHandler(overrides?: CallOverrides): Promise<string>;

    getFeeTable(
      _dst: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinks(overrides?: CallOverrides): Promise<string[]>;

    getRelays(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoutes(overrides?: CallOverrides): Promise<Types.RouteStructOutput[]>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getServices(
      overrides?: CallOverrides
    ): Promise<Types.ServiceStructOutput[]>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVerifiers(
      overrides?: CallOverrides
    ): Promise<Types.VerifierStructOutput[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeLink(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoute(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setBMCPeriphery(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBMCService(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeHandler(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTable(
      _dst: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    addLink(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoute(
      _dst: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addService(
      _svc: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVerifier(
      _net: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropMessage(
      _src: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _nsn: PromiseOrValue<BigNumberish>,
      _feeNetwork: PromiseOrValue<string>,
      _feeValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBMCPeriphery(overrides?: CallOverrides): Promise<BigNumber>;

    getBMCService(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeHandler(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeTable(
      _dst: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinks(overrides?: CallOverrides): Promise<BigNumber>;

    getRelays(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoutes(overrides?: CallOverrides): Promise<BigNumber>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServices(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifiers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLink(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoute(
      _dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeService(
      _svc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVerifier(
      _net: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBMCPeriphery(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBMCService(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeHandler(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeTable(
      _dst: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLink(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoute(
      _dst: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addService(
      _svc: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVerifier(
      _net: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropMessage(
      _src: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _nsn: PromiseOrValue<BigNumberish>,
      _feeNetwork: PromiseOrValue<string>,
      _feeValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBMCPeriphery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBMCService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeTable(
      _dst: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRelays(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoutes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifiers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLink(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoute(
      _dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeService(
      _svc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVerifier(
      _net: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBMCPeriphery(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBMCService(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeHandler(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTable(
      _dst: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
