/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ICCManagementInterface extends utils.Interface {
  functions: {
    "addReachable(string,string)": FunctionFragment;
    "getFee(string,bool)": FunctionFragment;
    "getHop(string)": FunctionFragment;
    "getService(string)": FunctionFragment;
    "getVerifier(string)": FunctionFragment;
    "isLinkRelay(string,address)": FunctionFragment;
    "removeReachable(string,string)": FunctionFragment;
    "resolveNext(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReachable"
      | "getFee"
      | "getHop"
      | "getService"
      | "getVerifier"
      | "isLinkRelay"
      | "removeReachable"
      | "resolveNext"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReachable",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHop",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLinkRelay",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReachable",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveNext",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReachable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLinkRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReachable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveNext",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICCManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICCManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { _fee: BigNumber; _values: BigNumber[] }
    >;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _next: string }>;
  };

  addReachable(
    _from: PromiseOrValue<string>,
    _reachable: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFee(
    _to: PromiseOrValue<string>,
    _response: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & { _fee: BigNumber; _values: BigNumber[] }
  >;

  getHop(
    _dst: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getService(
    _svc: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVerifier(
    _net: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isLinkRelay(
    _link: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeReachable(
    _from: PromiseOrValue<string>,
    _reachable: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveNext(
    _dst: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { _fee: BigNumber; _values: BigNumber[] }
    >;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHop(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getService(
      _svc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(
      _net: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLinkRelay(
      _link: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReachable(
      _from: PromiseOrValue<string>,
      _reachable: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveNext(
      _dst: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
