/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace Types {
  export type FeeInfoStruct = {
    network: PromiseOrValue<string>;
    values: PromiseOrValue<BigNumberish>[];
  };

  export type FeeInfoStructOutput = [string, BigNumber[]] & {
    network: string;
    values: BigNumber[];
  };

  export type BTPMessageStruct = {
    src: PromiseOrValue<string>;
    dst: PromiseOrValue<string>;
    svc: PromiseOrValue<string>;
    sn: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<BytesLike>;
    nsn: PromiseOrValue<BigNumberish>;
    feeInfo: Types.FeeInfoStruct;
  };

  export type BTPMessageStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    Types.FeeInfoStructOutput
  ] & {
    src: string;
    dst: string;
    svc: string;
    sn: BigNumber;
    message: string;
    nsn: BigNumber;
    feeInfo: Types.FeeInfoStructOutput;
  };
}

export interface ICCPeripheryInterface extends utils.Interface {
  functions: {
    "clearSeq(string)": FunctionFragment;
    "dropMessage(string,uint256,(string,string,string,int256,bytes,int256,(string,uint256[])))": FunctionFragment;
    "emitClaimRewardResult(address,string,int256,uint256)": FunctionFragment;
    "sendInternal(string,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clearSeq"
      | "dropMessage"
      | "emitClaimRewardResult"
      | "sendInternal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clearSeq",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dropMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      Types.BTPMessageStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimRewardResult",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendInternal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "clearSeq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dropMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitClaimRewardResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendInternal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICCPeriphery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICCPeripheryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  clearSeq(
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropMessage(
    _prev: PromiseOrValue<string>,
    _seq: PromiseOrValue<BigNumberish>,
    _msg: Types.BTPMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitClaimRewardResult(
    _sender: PromiseOrValue<string>,
    _network: PromiseOrValue<string>,
    _nsn: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendInternal(
    _next: PromiseOrValue<string>,
    _msg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearSeq(
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropMessage(
      _prev: PromiseOrValue<string>,
      _seq: PromiseOrValue<BigNumberish>,
      _msg: Types.BTPMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitClaimRewardResult(
      _sender: PromiseOrValue<string>,
      _network: PromiseOrValue<string>,
      _nsn: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendInternal(
      _next: PromiseOrValue<string>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
