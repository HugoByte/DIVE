/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IBMC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBMC__factory>;
    getContractFactory(
      name: "IBMV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBMV__factory>;
    getContractFactory(
      name: "IBSH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBSH__factory>;
    getContractFactory(
      name: "Integers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Integers__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "BMCManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BMCManagement__factory>;
    getContractFactory(
      name: "BMCPeriphery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BMCPeriphery__factory>;
    getContractFactory(
      name: "BMCService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BMCService__factory>;
    getContractFactory(
      name: "IBMCManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBMCManagement__factory>;
    getContractFactory(
      name: "IBMCPeriphery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBMCPeriphery__factory>;
    getContractFactory(
      name: "ICCManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICCManagement__factory>;
    getContractFactory(
      name: "ICCPeriphery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICCPeriphery__factory>;
    getContractFactory(
      name: "ICCService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICCService__factory>;
    getContractFactory(
      name: "IOwnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnerManager__factory>;
    getContractFactory(
      name: "BMV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BMV__factory>;
    getContractFactory(
      name: "BtpMessageVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BtpMessageVerifier__factory>;
    getContractFactory(
      name: "BtpMessageVerifierV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BtpMessageVerifierV2__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "DAppProxySample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAppProxySample__factory>;
    getContractFactory(
      name: "CallService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallService__factory>;
    getContractFactory(
      name: "ICallService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallService__factory>;
    getContractFactory(
      name: "ICallServiceReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallServiceReceiver__factory>;
    getContractFactory(
      name: "IFeeManage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeManage__factory>;

    getContractAt(
      name: "IBMC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBMC>;
    getContractAt(
      name: "IBMV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBMV>;
    getContractAt(
      name: "IBSH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBSH>;
    getContractAt(
      name: "Integers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Integers>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "BMCManagement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BMCManagement>;
    getContractAt(
      name: "BMCPeriphery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BMCPeriphery>;
    getContractAt(
      name: "BMCService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BMCService>;
    getContractAt(
      name: "IBMCManagement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBMCManagement>;
    getContractAt(
      name: "IBMCPeriphery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBMCPeriphery>;
    getContractAt(
      name: "ICCManagement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICCManagement>;
    getContractAt(
      name: "ICCPeriphery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICCPeriphery>;
    getContractAt(
      name: "ICCService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICCService>;
    getContractAt(
      name: "IOwnerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnerManager>;
    getContractAt(
      name: "BMV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BMV>;
    getContractAt(
      name: "BtpMessageVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BtpMessageVerifier>;
    getContractAt(
      name: "BtpMessageVerifierV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BtpMessageVerifierV2>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "DAppProxySample",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAppProxySample>;
    getContractAt(
      name: "CallService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallService>;
    getContractAt(
      name: "ICallService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallService>;
    getContractAt(
      name: "ICallServiceReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallServiceReceiver>;
    getContractAt(
      name: "IFeeManage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeManage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
