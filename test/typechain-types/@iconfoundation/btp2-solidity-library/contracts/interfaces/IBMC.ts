/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IBMCInterface extends utils.Interface {
  functions: {
    "getBtpAddress()": FunctionFragment;
    "getFee(string,bool)": FunctionFragment;
    "getNetworkAddress()": FunctionFragment;
    "getNetworkSn()": FunctionFragment;
    "sendMessage(string,string,int256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBtpAddress"
      | "getFee"
      | "getNetworkAddress"
      | "getNetworkSn"
      | "sendMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBtpAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkSn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBtpAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkSn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBMC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBMCInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBtpAddress(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _fee: BigNumber }>;

    getNetworkAddress(overrides?: CallOverrides): Promise<[string]>;

    getNetworkSn(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getBtpAddress(overrides?: CallOverrides): Promise<string>;

  getFee(
    _to: PromiseOrValue<string>,
    _response: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetworkAddress(overrides?: CallOverrides): Promise<string>;

  getNetworkSn(overrides?: CallOverrides): Promise<BigNumber>;

  sendMessage(
    _to: PromiseOrValue<string>,
    _svc: PromiseOrValue<string>,
    _sn: PromiseOrValue<BigNumberish>,
    _msg: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBtpAddress(overrides?: CallOverrides): Promise<string>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetworkAddress(overrides?: CallOverrides): Promise<string>;

    getNetworkSn(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getBtpAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetworkAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkSn(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBtpAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _to: PromiseOrValue<string>,
      _response: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkSn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _svc: PromiseOrValue<string>,
      _sn: PromiseOrValue<BigNumberish>,
      _msg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
